// REACT DEPENDENCIES ADDED BY JAFET
import { Entity, Scene } from 'aframe-react';
import React from 'react';
import ReactDOM from 'react-dom';

import {FirebaseWrapper} from './firebaseWrapper.js'
// import {FirebaseWrapper} from '../../../modified_modules/aframe-firebase-component/firebaseWrapper.js'


// console.log('the rapa is')
// console.log(FirebaseWrapper)


// var GeoFire = require('geofire');

// var FirebaseWrapper = require('./firebaseWrapper');

var getComponentProperty = AFRAME.utils.entity.getComponentProperty;
var setComponentProperty = AFRAME.utils.entity.setComponentProperty;

if (typeof AFRAME === 'undefined') {
  throw new Error('Component attempted to register before AFRAME was available.');
}


/**
 * Broadcast.
 */
AFRAME.registerComponent('firebase-broadcast', {
  schema: {
    id: { default: '' },
    components: { default: ['position', 'rotation'] },
    componentsOnce: { default: [], type: 'array' }
  },

  init: function(oldData) {
    var data = this.data;
    var el = this.el;
    var system = el.sceneEl.systems.firebase;

    if (data.components.length) {
      system.registerBroadcast(el);
    }
  }
});

export default {
  reactComponent: null,
  entitySpawner: null,
  entityChanger: null,
  entityRemover: null,
  changedComponentData: null,
  changedComponentDataDownstream_id: null,
  changedComponentDataUpstream_id: null,
  changed: false,
  changedComponentId: null,
  playerId: null,

  setPlayerId: function(playerId) {
    this.playerId = playerId;
  },
  setReactComponent: function(reactComponent) {
    this.reactComponent = reactComponent;
  },
  setEntitySpawner: function(entitySpawner) {
    this.entitySpawner = entitySpawner;
  },
  setEntityChanger: function(entityChanger) {
    this.entityChanger = entityChanger;
  },
  setEntityRemover: function(entityRemover) {
    this.entityRemover = entityRemover;
  },
  setChangedComponentData: function(changedComponentData) {
    this.changedComponentData = changedComponentData;
    this.changed = true
  },
  registerFirebaseSystem: function() {

    /**
     * Firebase system.
     */
    AFRAME.registerSystem('firebase', {
      schema: {
        apiKey: { type: 'string' },
        authDomain: { type: 'string' },
        channel: { type: 'string' },
        databaseURL: { type: 'string' },
        interval: { type: 'number' },
        storageBucket: { type: 'string' }
      },


      init: function() {
        // // Get config.
        // var config = this.data;

        // if (!config.apiKey && !window.debug) {
        //   return;
        //   console.log("SORRY BRO AM RETURNING")
        // }

        // this.broadcastingEntities = {};
        // this.entities = {};
        // this.interval = config.interval || 10;

        // // Set up Firebase.
        // console.log("DOING THE WRAPPER")
        // var FirebaseWrapper = require('./firebaseWrapper');
        // console.log("DONE WITH THE WRAPPER")

        // var firebaseWrapper = this.firebaseWrapper = new FirebaseWrapper();
        // firebaseWrapper.init(config);
        // this.firebase = firebaseWrapper.firebase;
        // this.database = firebaseWrapper.database;
        // console.log("ABOUT TO FETCH ENTITIES")
        // firebaseWrapper.getAllEntities().then(this.handleInitialSync.bind(this));
        // firebaseWrapper.onEntityAdded(this.handleEntityAdded.bind(this));
        // firebaseWrapper.onEntityChanged(this.handleEntityChanged.bind(this));
        // firebaseWrapper.onEntityRemoved(this.handleEntityRemoved.bind(this));
        ////NOW IT IS THIS
        const startPos = { x: 0, z: 0 }
        this.loadThisBitch(this.data.channel, startPos)
      },


      updatePosition: function(coords) {
        // this.firebaseWrapper.updatePosition(coords,this.handleEntityAdded.bind(this),this.handleEntityRemoved.bind(this))
        this.firebaseWrapper.updatePosition(coords)
        // this.firebaseWrapper.onEntityAdded(this.handleEntityAdded.bind(this));
        // this.firebaseWrapper.onEntityChanged(this.handleEntityChanged.bind(this));
        // this.firebaseWrapper.onEntityRemoved(this.handleEntityRemoved.bind(this));

      },
      loadThisBitch: function(channel, coords) {
        // Get config.
        var config = this.data;

        if (!config.apiKey && !window.debug) {
          return;
          console.log("SORRY BRO AM RETURNING")
        }

        this.broadcastingEntities = {};
        this.entities = {};
        this.interval = config.interval || 10;

        // Set up Firebase.
        // var FirebaseWrapper = require('./firebaseWrapper');
        // var firebaseWrapper = require('./firebaseWrapper');

        // import {FirebaseWrapper as firebaseWrapper} from './firebaseWrapper'
        // console.log('the wrapper alias is')
        // console.log(FirebaseWrapper)
        console.log('the wrapper is')
        console.log(firebaseWrapper)
        // console.log('the wrapper2 is')
        // console.log(FirebaseWrapper)

        var firebaseWrapper = this.firebaseWrapper = new FirebaseWrapper();
        this.firebaseWrapper=firebaseWrapper
        firebaseWrapper.init(config);
        this.firebase = firebaseWrapper.firebase;
        this.database = firebaseWrapper.database;
        // console.log("ABOUT TO FETCH ENTITIES")
        // firebaseWrapper.getAllEntities().then(function() {
        //   this.handleInitialSync.bind(this)
        // }.bind(this));


        // this.updatePosition({x:0,z:0},this.handleEntityAdded.bind(this),this.handleEntityRemoved.bind(this))
        firebaseWrapper.onEntityAdded(this.handleEntityAdded.bind(this));
        firebaseWrapper.onEntityChanged(this.handleEntityChanged.bind(this));
        firebaseWrapper.onEntityRemoved(this.handleEntityRemoved.bind(this));


        // console.log('Now fetching keys withing radius')
        // firebaseWrapper.getEntitiesByRadius().then(function(keyList) {
        //   console.log("this is the data that was retrieved")
        //   console.log(keyList)
        //   const data = {}
        //   keyList.forEach(function(objectId, index, array) {
        //     firebaseWrapper.entsRef.child(objectId).once('value', function(snapshot) {
        //       const theVal = snapshot.val()
        //       console.log('just retrieved this bro')
        //       console.log(theVal)
        //       if (theVal !== null && theVal !== undefined) {
        //         const key = Object.keys(theVal)[0]
        //         data[key] = theVal
        //       }
        //       // resolve(snapshot.val() || {});
        //     });
        //   })
        //   // this.handleInitialSync.bind(this)
        // }.bind(this));





      },

      // /**
      // * Initial sync.
      // */
      // handleInitialSync: function(data) {
      //   console.log('doing handle initial sync')
      //   var self = this;
      //   var broadcastingEntities = this.broadcastingEntities;
      //   console.log("Data inside handleInitialSync is and with the new method: ")
      //   console.log(data)
      //   Object.keys(data).forEach(function(entityId) {
      //     self.handleEntityAdded(entityId, data[entityId]);
      //   });
      //   // THIS IS HOW YOU INITIALIZE A COMPONENT THAT DOES NOT INITIALIZE WELL ON ITS OWN. YOU MAY NEED TO USE 
      //   // SOMETHING ELSE INSTEAD OF UPDATE AND MAYBE LISTEN TO A DIFFERENT EVENT IF NEEDED
      //   // console.log('bro this is the value')
      //   // console.log(document.querySelector('a-scene').querySelectorAll('[environment]')[0])
      //   // if (document.querySelector('a-scene').querySelectorAll('[environment]')[0] !== undefined) {
      //   //   try {
      //   //     document.querySelector('a-scene').querySelectorAll('[environment]')[0].components.environment.update()
      //   //   }
      //   //   catch (error) {
      //   //     document.querySelector('a-scene').querySelectorAll('[environment]')[0].addEventListener('componentinitialized', function(evt) {
      //   //       console.log('evt is')
      //   //       console.log(evt)
      //   //       if (evt.detail.name === 'environment') {
      //   //         // console.log('Entity has moved to', evt.target.getAttribute('position'), '!');
      //   //         console.log('Updating environment')
      //   //         document.querySelector('a-scene').querySelectorAll('[environment]')[0].components.environment.update()
      //   //       }
      //   //     });
      //   //   }
      //   // }


      // },

      /**
       * Entity added.
       */
      handleEntityAdded: function(id, data) {

        // console.log('adding entity with data:')
        // console.log(data)
        // Already added.
        if (this.entities[id] || this.broadcastingEntities[id]) {
          // console.log("JUST RETURNING BRO")
          return;
        }

        this.broadcastingEntities[id] = "Its nuts."
        this.entities[id] = "Its nuts too."

        var entity = module.exports.entitySpawner(id, data);
        this.entities[id] = entity;
        // console.log("DOING THE INITIAL SYYYYYYYNC")
      },

      /**
       * Entity updated.
       */
      handleEntityChanged: function(id, components) {
        var entity = module.exports.entityChanger(id, components);
      },

      /**
       * Entity removed. Detach.
       */
      handleEntityRemoved: function(id) {
        console.log('calling entity removed from the component')
        this.entities[id]=false
        this.broadcastingEntities[id]=false
        module.exports.entityRemover(id);
      },

      /**
       * Register.
       */
      registerBroadcast: function(el) {
        var broadcastingEntities = this.broadcastingEntities;

        // Initialize entry, get assigned a Firebase ID.
        var id = this.firebaseWrapper.createEntity();

        setTimeout(function() {
          broadcastingEntities[id] = el;
          el.setAttribute('firebase-broadcast', 'id', id);
        });

        // Remove entry when client disconnects.
        this.firebaseWrapper.removeEntityOnDisconnect(id);
      },

      /**
       * Broadcast.
       */
      tick: function(time) {
        if (!this.firebase) { return; }

        var firebaseWrapper = this.firebaseWrapper;

        if (time - this.time < this.interval) { return; }
        this.time = time;

        if (!module.exports.changed)
          return
        try {
          if (module.exports.changedComponentData.vr_player) // && (module.exports.changedComponentData.id != module.exports.playerId))
          {
            module.exports.changed = false
            return
          }
          firebaseWrapper.updateEntity(module.exports.changedComponentData.id, module.exports.changedComponentData);
          module.exports.changed = false
        }
        catch (e) {}
      },
    });
  }
}
// export {exports}
;
